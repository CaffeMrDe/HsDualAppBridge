// Generated by gencpp from file hirop_msgs/robotErrorResponse.msg
// DO NOT EDIT!


#ifndef HIROP_MSGS_MESSAGE_ROBOTERRORRESPONSE_H
#define HIROP_MSGS_MESSAGE_ROBOTERRORRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hirop_msgs
{
template <class ContainerAllocator>
struct robotErrorResponse_
{
  typedef robotErrorResponse_<ContainerAllocator> Type;

  robotErrorResponse_()
    : isError(false)
    , errorLevel(0)
    , errorMsg()
    , dealMsg()  {
    }
  robotErrorResponse_(const ContainerAllocator& _alloc)
    : isError(false)
    , errorLevel(0)
    , errorMsg(_alloc)
    , dealMsg(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _isError_type;
  _isError_type isError;

   typedef int8_t _errorLevel_type;
  _errorLevel_type errorLevel;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _errorMsg_type;
  _errorMsg_type errorMsg;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _dealMsg_type;
  _dealMsg_type dealMsg;





  typedef boost::shared_ptr< ::hirop_msgs::robotErrorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hirop_msgs::robotErrorResponse_<ContainerAllocator> const> ConstPtr;

}; // struct robotErrorResponse_

typedef ::hirop_msgs::robotErrorResponse_<std::allocator<void> > robotErrorResponse;

typedef boost::shared_ptr< ::hirop_msgs::robotErrorResponse > robotErrorResponsePtr;
typedef boost::shared_ptr< ::hirop_msgs::robotErrorResponse const> robotErrorResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hirop_msgs::robotErrorResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hirop_msgs::robotErrorResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hirop_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'hirop_msgs': ['/home/wangneng/catkin_ws/src/hirop_ros/hirop_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hirop_msgs::robotErrorResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hirop_msgs::robotErrorResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hirop_msgs::robotErrorResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hirop_msgs::robotErrorResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hirop_msgs::robotErrorResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hirop_msgs::robotErrorResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hirop_msgs::robotErrorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e0f6e99a383cee4fd92b0a43632c9079";
  }

  static const char* value(const ::hirop_msgs::robotErrorResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe0f6e99a383cee4fULL;
  static const uint64_t static_value2 = 0xd92b0a43632c9079ULL;
};

template<class ContainerAllocator>
struct DataType< ::hirop_msgs::robotErrorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hirop_msgs/robotErrorResponse";
  }

  static const char* value(const ::hirop_msgs::robotErrorResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hirop_msgs::robotErrorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool isError\n\
int8 errorLevel\n\
string errorMsg\n\
string dealMsg\n\
\n\
";
  }

  static const char* value(const ::hirop_msgs::robotErrorResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hirop_msgs::robotErrorResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isError);
      stream.next(m.errorLevel);
      stream.next(m.errorMsg);
      stream.next(m.dealMsg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robotErrorResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hirop_msgs::robotErrorResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hirop_msgs::robotErrorResponse_<ContainerAllocator>& v)
  {
    s << indent << "isError: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isError);
    s << indent << "errorLevel: ";
    Printer<int8_t>::stream(s, indent + "  ", v.errorLevel);
    s << indent << "errorMsg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.errorMsg);
    s << indent << "dealMsg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.dealMsg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HIROP_MSGS_MESSAGE_ROBOTERRORRESPONSE_H
